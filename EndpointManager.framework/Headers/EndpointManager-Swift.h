// Generated by Apple Swift version 4.0 effective-3.2 (swiftlang-900.0.65 clang-900.0.37)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("EndpointManager")
@class NSCoder;

/// An Endpoint object containing a name and url
SWIFT_CLASS("_TtC15EndpointManager8Endpoint")
@interface Endpoint : NSObject <NSCoding>
/// The name of the Endpoint
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSURL * _Nullable url;
/// Initialize the endpoint object
/// \param name the name of the endpoint
///
/// \param url the url of the endpoint
///
///
/// returns:
/// initialized endpoint
- (nonnull instancetype)initWithName:(NSString * _Nullable)name url:(NSURL * _Nullable)url OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class UIWindow;

/// Your one point of contact with the logger
SWIFT_CLASS("_TtC15EndpointManager14EndpointLogger")
@interface EndpointLogger : NSObject
/// Whether you want the logger to print to console
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL logToConsole;)
+ (BOOL)logToConsole SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogToConsole:(BOOL)value;
/// Whether you want to intercept and display all requests
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL interceptAndDisplayRequest;)
+ (BOOL)interceptAndDisplayRequest SWIFT_WARN_UNUSED_RESULT;
+ (void)setInterceptAndDisplayRequest:(BOOL)value;
/// Whether you want to intercept and display all responses
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL interceptAndDisplayResponse;)
+ (BOOL)interceptAndDisplayResponse SWIFT_WARN_UNUSED_RESULT;
+ (void)setInterceptAndDisplayResponse:(BOOL)value;
/// A reference to the keyWindow. Pass in your working keyWindow otherwise, intercepting and presenting <em>will not work</em>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, weak) UIWindow * _Nullable keyWindow;)
+ (UIWindow * _Nullable)keyWindow SWIFT_WARN_UNUSED_RESULT;
+ (void)setKeyWindow:(UIWindow * _Nullable)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Monitor endpoints on a specific url session
/// The url to be monitored will be matched exactly:
/// ie. if you want to monitor for example:
/// \code
/// https://someURL.io/first
/// https://someURL.io/second
///
/// \endcodepassing in:
/// <em><code>https://someURL.io</code></em> will match everything with the base URL of <em><code>https://someURL.io</code></em>
/// including both:
/// \code
/// https://someURL.io/first
/// https://someURL.io/second
///
/// \endcodebut <em><code>https://someURL.io/first</code></em> will only match the first as well as any other path under the first:
/// \code
/// https://someURL.io/first
/// https://someURL.io/first/third
///
/// \endcodeand will not match
/// \code
/// https://someURL.io/second
///
/// \endcode\param endpoints an array of endpoints to monitor.
/// Set these to the endpoint you want monitored.
/// Technically, only the url is used.
///
+ (void)monitor:(NSArray<Endpoint *> * _Nonnull)endpoints;
@end


/// The Endpoint Manager
/// Your one point of contact with endpoints
/// Subscribe to the <em><code>EndpointChangedNotification</code></em> notification for changes to selected endpoint
SWIFT_CLASS("_TtC15EndpointManager15EndpointManager")
@interface EndpointManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EndpointChangedNotification;)
+ (NSString * _Nonnull)EndpointChangedNotification SWIFT_WARN_UNUSED_RESULT;
/// The array of endpoints
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<Endpoint *> * _Nullable endpoints;)
+ (NSArray<Endpoint *> * _Nullable)endpoints SWIFT_WARN_UNUSED_RESULT;
/// The selected endpoint
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) Endpoint * _Nullable selectedEndpoint;)
+ (Endpoint * _Nullable)selectedEndpoint SWIFT_WARN_UNUSED_RESULT;
+ (void)setSelectedEndpoint:(Endpoint * _Nullable)newValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Populate the endpoints
/// \param endpoints an array of endpoints
///
+ (void)populate:(NSArray<Endpoint *> * _Nonnull)endpoints;
/// Present the endpoint manager screen
/// \param window a reference to your current working window. if in doubt, pass in <em><code>UIApplication.sharedApplication().keyWindow</code></em>
///
+ (void)presentEndpointManagerFrom:(UIWindow * _Nonnull)window;
@end





SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
